import React, { useState, useRef } from 'react';
import { Download, Filter, Calendar, FileText, BarChart3, Users, CheckCircle, Printer, Search } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

export function Reports() {
  const { user } = useAuth();
  const [selectedTimeRange, setSelectedTimeRange] = useState('30d');
  const [selectedMetric, setSelectedMetric] = useState('student-progress');
  const [searchTerm, setSearchTerm] = useState('');
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState<'pdf' | 'excel' | 'csv'>('pdf');
  const [showExportMenu, setShowExportMenu] = useState(false);
  const reportRef = useRef<HTMLDivElement>(null);

  const handleDownloadReport = async (format: 'pdf' | 'excel' | 'csv') => {
    setIsExporting(true);
    setExportFormat(format);
    setShowExportMenu(false);
    
    try {
      // Prepare report data
      const reportTitle = selectedReportType?.name || 'Report';
      const dateRangeText = selectedTimeRange === '7d' ? 'Last 7 days' :
                           selectedTimeRange === '30d' ? 'Last 30 days' :
                           selectedTimeRange === '90d' ? 'Last 90 days' : 'Custom range';
      
      // Wait a bit to show loading state
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      if (format === 'pdf') {
        // Create PDF
        const pdf = new jsPDF();
        
        // Add title
        pdf.setFontSize(18);
        pdf.text(reportTitle, 105, 15, { align: 'center' });
        
        // Add metadata
        pdf.setFontSize(10);
        pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 14, 25);
        pdf.text(`Date Range: ${dateRangeText}`, 14, 30);
        pdf.text(`Generated by: ${user?.name}`, 14, 35);
        
        // Add table data
        if (selectedMetric === 'student-progress') {
          const tableData = (data as any[]).map(row => [
            row.student,
            row.course,
            `${row.progress}%`,
            row.lastActive
          ]);
          
          (pdf as any).autoTable({
            head: [['Student', 'Course', 'Progress', 'Last Active']],
            body: tableData,
            startY: 40,
            theme: 'grid',
            styles: { fontSize: 10, cellPadding: 3 },
            headStyles: { fillColor: [66, 133, 244], textColor: 255 }
          });
        } 
        else if (selectedMetric === 'course-analytics') {
          const tableData = (data as any[]).map(row => [
            row.course,
            row.enrollments,
            `${row.completion}%`,
            row.rating
          ]);
          
          (pdf as any).autoTable({
            head: [['Course', 'Enrollments', 'Completion Rate', 'Rating']],
            body: tableData,
            startY: 40,
            theme: 'grid',
            styles: { fontSize: 10, cellPadding: 3 },
            headStyles: { fillColor: [66, 133, 244], textColor: 255 }
          });
        }
        else if (selectedMetric === 'engagement') {
          const tableData = (data as any[]).map(row => [
            row.metric,
            row.value,
            row.change
          ]);
          
          (pdf as any).autoTable({
            head: [['Metric', 'Value', 'Change']],
            body: tableData,
            startY: 40,
            theme: 'grid',
            styles: { fontSize: 10, cellPadding: 3 },
            headStyles: { fillColor: [66, 133, 244], textColor: 255 }
          });
        }
        
        // Add footer
        const pageCount = (pdf as any).internal.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
          pdf.setPage(i);
          pdf.setFontSize(8);
          pdf.text(`LinguaLearn - Page ${i} of ${pageCount}`, 105, pdf.internal.pageSize.height - 10, { align: 'center' });
        }
        
        // Save PDF
        pdf.save(`${selectedMetric}-report-${selectedTimeRange}.pdf`);
      } 
      else if (format === 'excel' || format === 'csv') {
        // Create CSV content
        let csvContent = '';
        
        if (selectedMetric === 'student-progress') {
          csvContent = 'Student,Course,Progress,Last Active\n';
          csvContent += (data as any[]).map(row => 
            `"${row.student}","${row.course}",${row.progress},"${row.lastActive}"`
          ).join('\n');
        } 
        else if (selectedMetric === 'course-analytics') {
          csvContent = 'Course,Enrollments,Completion Rate,Rating\n';
          csvContent += (data as any[]).map(row => 
            `"${row.course}",${row.enrollments},${row.completion},${row.rating}`
          ).join('\n');
        }
        else if (selectedMetric === 'engagement') {
          csvContent = 'Metric,Value,Change\n';
          csvContent += (data as any[]).map(row => 
            `"${row.metric}","${row.value}","${row.change}"`
          ).join('\n');
        }
        
        // Create and download file
        const blob = new Blob([csvContent], { type: format === 'csv' ? 'text/csv' : 'application/vnd.ms-excel' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${selectedMetric}-report-${selectedTimeRange}.${format === 'csv' ? 'csv' : 'xlsx'}`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
      
      // Show success message
      alert(`Report exported successfully as ${format.toUpperCase()}!`);
      
    } catch (error) {
      console.error('Export failed:', error);
      alert('Export failed. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  // Report types
  const reportTypes = [
    {
      id: 'student-progress',
      name: 'Student Progress Report',
      description: 'Detailed progress tracking for all students',
      icon: Users,
    },
    {
      id: 'course-analytics',
      name: 'Course Analytics',
      description: 'Performance metrics for all courses',
      icon: BarChart3,
    },
    {
      id: 'engagement',
      name: 'Engagement Report',
      description: 'User activity and engagement metrics',
      icon: FileText,
    },
  ];

  // Selected report type
  const selectedReportType = reportTypes.find(r => r.id === selectedMetric);

  // Mock report data
  const reportData = {
    'student-progress': [
      { student: 'Rahul Kumar', course: 'English Basics', progress: 85, lastActive: '2024-01-15' },
      { student: 'Priya Sharma', course: 'Hindi Grammar', progress: 72, lastActive: '2024-01-14' },
      { student: 'Amit Singh', course: 'Tamil Introduction', progress: 91, lastActive: '2024-01-15' },
    ],
    'course-analytics': [
      { course: 'English Basics', enrollments: 156, completion: 78, rating: 4.8 },
      { course: 'Hindi Grammar', enrollments: 89, completion: 65, rating: 4.6 },
      { course: 'Tamil Introduction', enrollments: 45, completion: 82, rating: 4.7 },
    ],
    'engagement': [
      { metric: 'Daily Active Users', value: 234, change: '+12%' },
      { metric: 'Average Session Duration', value: '25 min', change: '+8%' },
      { metric: 'Course Completion Rate', value: '78%', change: '+5%' },
    ],
  };

  // Report data based on selected report type
  const data = reportData[selectedMetric as keyof typeof reportData];

  // Comprehensive analytics data
  const analyticsData = {
    overview: {
      totalUsers: 1234,
      totalCourses: 24,
      totalEnrollments: 3456,
      completionRate: 78,
      avgStudyTime: 2.5,
      certificatesIssued: 456
    },
    userMetrics: {
      activeUsers: 890,
      newRegistrations: 123,
      userRetention: 85,
      avgSessionDuration: 45
    },
    courseMetrics: {
      mostPopularCourses: [
        { name: 'English for Beginners', enrollments: 456, completion: 85 },
        { name: 'Hindi Grammar Basics', enrollments: 324, completion: 78 },
        { name: 'Tamil Introduction', enrollments: 198, completion: 72 }
      ].filter(course => 
        !searchTerm || course.name.toLowerCase().includes(searchTerm.toLowerCase())
      ),
      coursesByLanguage: {
        english: 12,
        hindi: 8,
        tamil: 4
      }
    },
    teacherMetrics: {
      totalTeachers: 56,
      avgCoursesPerTeacher: 3.2,
      avgStudentsPerTeacher: 22,
      topPerformingTeachers: [
        { name: 'Dr. Priya Sharma', courses: 8, students: 156, rating: 4.8 },
        { name: 'Prof. Rajesh Kumar', courses: 5, students: 89, rating: 4.6 }
      ].filter(teacher => 
        !searchTerm || teacher.name.toLowerCase().includes(searchTerm.toLowerCase())
      )
    },
    learningMetrics: {
      methodologyUsage: {
        'tpr': 45,
        'natural-reading': 38,
        'joyful-learning': 42,
        'immersive-storytelling': 25,
        'conversational-practice': 33
      },
      skillProgress: {
        reading: 82,
        writing: 75,
        speaking: 68,
        listening: 79
      }
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Reports</h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            Generate and download detailed reports and analytics
          </p>
        </div>
        
        <div className="mt-4 sm:mt-0 flex space-x-2">
          <button 
            onClick={handlePrint}
            className="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors flex items-center space-x-2"
          >
            <Printer className="h-4 w-4" />
            <span>Print</span>
          </button>
          
          <div className="relative">
            <button 
              disabled={isExporting}
              onClick={() => setShowExportMenu(!showExportMenu)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2"
            >
              {isExporting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Exporting...</span>
                </>
              ) : (
                <>
                  <Download className="h-4 w-4" />
                  <span>Export</span>
                </>
              )}
            </button>
            
            {showExportMenu && !isExporting && (
              <>
                <div 
                  className="fixed inset-0 z-10" 
                  onClick={() => setShowExportMenu(false)}
                ></div>
                <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-20 border border-gray-200 dark:border-gray-700">
                  <button
                    onClick={() => handleDownloadReport('pdf')}
                    className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center space-x-2"
                  >
                    <FileText className="h-4 w-4" />
                    <span>Download as PDF</span>
                  </button>
                  <button
                    onClick={() => handleDownloadReport('excel')}
                    className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center space-x-2"
                  >
                    <BarChart3 className="h-4 w-4" />
                    <span>Download as Excel</span>
                  </button>
                  <button
                    onClick={() => handleDownloadReport('csv')}
                    className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center space-x-2"
                  >
                    <FileText className="h-4 w-4" />
                    <span>Download as CSV</span>
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Export Status */}
      {isExporting && (
        <div className="bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
          <div className="flex items-center space-x-3">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 dark:border-blue-400"></div>
            <div>
              <h4 className="text-blue-900 dark:text-blue-100 font-medium">Generating Report...</h4>
              <p className="text-blue-700 dark:text-blue-300 text-sm">Please wait while we prepare your {selectedReportType?.name} as {exportFormat.toUpperCase()}</p>
            </div>
          </div>
        </div>
      )}

      {/* Search Bar for Reports */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 p-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search in reports..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          />
        </div>
      </div>

      {/* Report Filters */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 p-6">
        <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Report Configuration</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Report Type
            </label>
            <select
              value={selectedMetric}
              onChange={(e) => setSelectedMetric(e.target.value)}
              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              {reportTypes.map((type) => (
                <option key={type.id} value={type.id}>
                  {type.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Date Range
            </label>
            <select
              value={selectedTimeRange}
              onChange={(e) => setSelectedTimeRange(e.target.value)}
              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value="7d">Last 7 days</option>
              <option value="30d">Last 30 days</option>
              <option value="90d">Last 90 days</option>
              <option value="custom">Custom range</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Format
            </label>
            <select 
              value={exportFormat}
              onChange={(e) => setExportFormat(e.target.value as 'pdf' | 'excel' | 'csv')}
              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value="pdf">PDF</option>
              <option value="excel">Excel</option>
              <option value="csv">CSV</option>
            </select>
          </div>
        </div>
      </div>

      {/* Report Preview */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 p-6" ref={reportRef}>
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            {selectedReportType && (
              <>
                <selectedReportType.icon className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                <div>
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                    {selectedReportType.name}
                  </h2>
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    {selectedReportType.description}
                  </p>
                </div>
              </>
            )}
          </div>
          <div className="flex items-center space-x-2">
            <button className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors border border-gray-300 dark:border-gray-600 rounded-lg">
              <Filter className="h-4 w-4" />
            </button>
            <button className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors border border-gray-300 dark:border-gray-600 rounded-lg">
              <Calendar className="h-4 w-4" />
            </button>
          </div>
        </div>

        {/* Report Content */}
        <div className="overflow-x-auto">
          {selectedMetric === 'student-progress' && (
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200 dark:border-gray-600">
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Student</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Course</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Progress</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Last Active</th>
                </tr>
              </thead>
              <tbody>
                {(data as any[]).map((row, index) => (
                  <tr key={index} className="border-b border-gray-100 dark:border-gray-700">
                    <td className="py-3 px-4 text-gray-900 dark:text-white">{row.student}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{row.course}</td>
                    <td className="py-3 px-4">
                      <div className="flex items-center space-x-2">
                        <div className="w-20 bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full"
                            style={{ width: `${row.progress}%` }}
                          ></div>
                        </div>
                        <span className="text-sm font-medium text-gray-900 dark:text-white">{row.progress}%</span>
                      </div>
                    </td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{row.lastActive}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}

          {selectedMetric === 'course-analytics' && (
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200 dark:border-gray-600">
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Course</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Enrollments</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Completion Rate</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-600 dark:text-gray-400">Rating</th>
                </tr>
              </thead>
              <tbody>
                {(data as any[]).map((row, index) => (
                  <tr key={index} className="border-b border-gray-100 dark:border-gray-700">
                    <td className="py-3 px-4 text-gray-900 dark:text-white">{row.course}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{row.enrollments}</td>
                    <td className="py-3 px-4">
                      <span className="text-green-600 dark:text-green-400 font-medium">{row.completion}%</span>
                    </td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{row.rating} ⭐</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}

          {selectedMetric === 'engagement' && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {(data as any[]).map((metric, index) => (
                <div key={index} className="text-center p-6 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">{metric.metric}</h3>
                  <div className="text-3xl font-bold text-blue-600 dark:text-blue-400 mb-1">{metric.value}</div>
                  <div className="text-sm text-green-600 dark:text-green-400">{metric.change}</div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Quick Reports */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {reportTypes.map((type) => {
          const Icon = type.icon;
          return (
            <button
              key={type.id}
              onClick={() => setSelectedMetric(type.id)}
              className={`text-left p-6 border-2 rounded-xl transition-all duration-200 hover:shadow-lg ${
                selectedMetric === type.id
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900 dark:border-blue-400'
                  : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500 bg-white dark:bg-gray-800'
              }`}
            >
              <div className="flex items-center space-x-3 mb-3">
                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                  selectedMetric === type.id 
                    ? 'bg-blue-100 dark:bg-blue-800' 
                    : 'bg-blue-100 dark:bg-blue-900'
                }`}>
                  <Icon className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                </div>
                <h3 className="font-semibold text-gray-900 dark:text-white">{type.name}</h3>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400">{type.description}</p>
              {selectedMetric === type.id && (
                <div className="mt-3 flex items-center text-blue-600 dark:text-blue-400">
                  <CheckCircle className="h-4 w-4 mr-1" />
                  <span className="text-sm font-medium">Selected</span>
                </div>
              )}
            </button>
          );
        })}
      </div>
    </div>
  );
}